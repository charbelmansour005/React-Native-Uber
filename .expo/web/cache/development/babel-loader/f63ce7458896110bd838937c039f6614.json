{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport * as Location from \"expo-location\";\nimport * as SecureStore from \"expo-secure-store\";\nimport { Card, Divider } from \"react-native-paper\";\nimport { useAppDispatch } from \"../../redux/app/rtkHooks\";\nimport { useToast } from \"react-native-toast-notifications\";\nimport { RefreshControl } from \"react-native-gesture-handler\";\nimport { themeColors } from \"../../config/themeColors\";\nimport { getNearPassengersAPI } from \"../../services/getNearPassengersAPI\";\nimport { fetchTours } from \"../../redux/passenger/tour/tourSlice\";\nimport { instance } from \"../../services/api\";\nimport { styles } from \"./styles\";\nimport { DriverCardData, DriverMapView, PassengerMapView } from \"../../components/index\";\nimport { Durations } from \"../../helpers/durations\";\nimport { finishTourAPI } from \"../../services/finishTourAPI\";\nimport { bookTourAPI } from \"../../services/bookTourAPI\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar initialRegion = {\n  latitude: 33.8938,\n  longitude: 35.5018,\n  latitudeDelta: 2.01,\n  longitudeDelta: 2.01\n};\nvar initialDriverState = {\n  data: [],\n  errorMsg: null,\n  fetchingLocation: false,\n  mapRegion: initialRegion,\n  passengerName: null,\n  passengerNumber: null,\n  chosenTourID: null,\n  loadingNearPsngrs: false,\n  tourChosen: false,\n  destination: null\n};\nvar Driver = function Driver() {\n  var _useState = useState(initialDriverState),\n    _useState2 = _slicedToArray(_useState, 2),\n    driverState = _useState2[0],\n    setDriverState = _useState2[1];\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    dispatch(fetchTours());\n  }, []);\n  var toast = useToast();\n\n  var autoSendLocation = function () {\n    var _ref = _asyncToGenerator(function* () {\n      setDriverState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          fetchingLocation: true\n        });\n      });\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== \"granted\") {\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            errorMsg: \"Permission to access location was denied\"\n          });\n        });\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({});\n      setDriverState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          mapRegion: {\n            latitude: location.coords.latitude,\n            longitude: location.coords.longitude,\n            latitudeDelta: 0.001,\n            longitudeDelta: 0.001\n          }\n        });\n      });\n      try {\n        var latitude = location.coords.latitude;\n        var longitude = location.coords.longitude;\n        var body = {\n          longitude: longitude,\n          latitude: latitude\n        };\n        yield instance.post(\"/auth/updatecoordinates\", body);\n      } catch (error) {\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            fetchingLocation: false\n          });\n        });\n        console.log(error);\n        toast.show(\"There was an error\\nPlease try again\", {\n          placement: \"center\",\n          type: \"error\"\n        });\n        setTimeout(autoSendLocation, 2000);\n      }\n      setDriverState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          fetchingLocation: false\n        });\n      });\n    });\n    return function autoSendLocation() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    autoSendLocation();\n  }, []);\n  var getNearPassengers = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            loadingNearPsngrs: true\n          });\n        });\n        var response = yield getNearPassengersAPI();\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            data: response.data,\n            loadingNearPsngrs: false\n          });\n        });\n      } catch (error) {\n        console.log(error);\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            loadingNearPsngrs: false\n          });\n        });\n      }\n    });\n    return function getNearPassengers() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var startTour = useCallback(function () {\n    var _ref3 = _asyncToGenerator(function* (id) {\n      try {\n        var _result$coordinates, _result$coordinates2, _result$passenger, _result$passenger2;\n        var result = yield bookTourAPI(id);\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            chosenTourID: id\n          });\n        });\n        toast.show(\"Tour started\\n\\nPassenger location dropped on map.\", {\n          textStyle: {\n            fontWeight: \"normal\"\n          },\n          type: \"normal\",\n          normalColor: \"#3466b3\"\n        });\n        var latitudeResp = (_result$coordinates = result.coordinates) == null ? void 0 : _result$coordinates.latitude;\n        var longitudeResp = (_result$coordinates2 = result.coordinates) == null ? void 0 : _result$coordinates2.longitude;\n        var nameResp = (_result$passenger = result.passenger) == null ? void 0 : _result$passenger.name;\n        var phoneResp = (_result$passenger2 = result.passenger) == null ? void 0 : _result$passenger2.phoneNumber;\n        setDriverState(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            passengerName: nameResp,\n            passengerNumber: phoneResp,\n            destination: {\n              latitude: latitudeResp,\n              longitude: longitudeResp,\n              latitudeDelta: 0.1,\n              longitudeDelta: 0.1\n            },\n            tourChosen: true\n          });\n        });\n\n        getNearPassengers();\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [getNearPassengers, driverState.chosenTourID, driverState.destination, driverState.passengerName, driverState.passengerNumber]);\n\n  var renderDriverToursItem = function renderDriverToursItem(_ref4) {\n    var item = _ref4.item,\n      index = _ref4.index;\n    return _jsx(View, {\n      style: {\n        width: \"100%\"\n      },\n      children: _jsxs(Card, {\n        mode: \"elevated\",\n        elevation: 3,\n        style: styles.cardWrapper,\n        children: [_jsx(DriverCardData, {\n          index: index,\n          distanceInKM: item.distanceInKiloMeter,\n          startTime: item.startTime,\n          endTime: item.endTime\n        }), _jsx(Pressable, {\n          android_ripple: {\n            color: \"gray\"\n          },\n          style: styles.cardFindButton,\n          onPress: function onPress() {\n            return startTour(item._id);\n          },\n          children: _jsx(Text, {\n            style: styles.cardFindText,\n            children: \"Start / Book tour\"\n          })\n        })]\n      })\n    });\n  };\n  var showDriverToast = function showDriverToast() {\n    return toast.show(\"Fetching near passengers\", {\n      placement: \"top\",\n      style: {\n        marginTop: 20\n      },\n      duration: Durations.SHORT,\n      normalColor: \"#3466b3\",\n      textStyle: {\n        fontWeight: \"normal\"\n      }\n    });\n  };\n  var getShowName = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      var PersonName = yield SecureStore.getItemAsync(\"PersonName\");\n      toast.show(\"Welcome, \" + PersonName, {\n        placement: \"bottom\",\n        style: {\n          marginTop: 20\n        },\n        duration: Durations.MEDIUM,\n        normalColor: \"#3466b3\",\n        textStyle: {\n          fontWeight: \"normal\"\n        }\n      });\n    });\n    return function getShowName() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    getShowName();\n    showDriverToast();\n    setTimeout(function () {\n      getNearPassengers();\n    }, 2000);\n  }, []);\n  var handleRefresh = function handleRefresh() {\n    setDriverState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        loadingNearPsngrs: false\n      });\n    });\n    getNearPassengers();\n  };\n  var markTourAsComplete = useCallback(_asyncToGenerator(function* () {\n    try {\n      var _yield$finishTourAPI = yield finishTourAPI(driverState.chosenTourID),\n        message = _yield$finishTourAPI.message;\n      setDriverState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          tourChosen: false\n        });\n      });\n      toast.show(message);\n    } catch (error) {\n      toast.show(\"there was a problem finish your tour.\");\n      console.log(error);\n    }\n  }), [driverState.chosenTourID]);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(View, {\n      children: !driverState.tourChosen ? _jsxs(React.Fragment, {\n        children: [_jsx(DriverMapView, {\n          mapRegion: driverState.mapRegion\n        }), _jsx(FlatList, {\n          ListHeaderComponent: _jsx(React.Fragment, {}),\n          ListEmptyComponent: _jsx(View, {\n            style: styles.listFooterWrapper,\n            children: _jsx(Text, {\n              style: styles.listFooterText,\n              children: \"No Available Tours at this time.\"\n            })\n          }),\n          refreshControl: _jsx(RefreshControl, {\n            enabled: !driverState.loadingNearPsngrs,\n            refreshing: driverState.loadingNearPsngrs,\n            onRefresh: _asyncToGenerator(function* () {\n              handleRefresh();\n            }),\n            tintColor: \"black\"\n          }),\n          ListFooterComponent: _jsx(View, {\n            children: driverState.data.length ? _jsx(View, {\n              style: styles.listFooterWrapper,\n              children: _jsx(Text, {\n                style: styles.listFooterText,\n                children: driverState.loadingNearPsngrs ? \"Loading near passengers\" : \"End Reached\"\n              })\n            }) : _jsx(React.Fragment, {})\n          }),\n          contentContainerStyle: {\n            flexGrow: 1\n          },\n          data: driverState.data,\n          renderItem: renderDriverToursItem,\n          keyExtractor: function keyExtractor(item) {\n            return item._id;\n          }\n        }), _jsx(_Fragment, {\n          children: driverState.fetchingLocation && _jsx(ActivityIndicator, {\n            size: \"large\",\n            color: \"#3466b3\",\n            style: {\n              position: \"absolute\",\n              left: 1,\n              right: 1,\n              top: 1,\n              marginTop: \"25%\"\n            }\n          })\n        })]\n      }) : _jsxs(React.Fragment, {\n        children: [_jsx(PassengerMapView, {\n          mapRegion: driverState.mapRegion,\n          destination: driverState.destination,\n          passengerName: driverState.passengerName,\n          passengerNumber: driverState.passengerNumber\n        }), driverState.passengerName && driverState.passengerNumber && _jsx(React.Fragment, {\n          children: _jsxs(View, {\n            style: {\n              padding: 10,\n              backgroundColor: themeColors.googleGray,\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              right: 0,\n              opacity: 1,\n              height: \"12%\"\n            },\n            children: [_jsxs(Text, {\n              style: {\n                color: \"white\",\n                marginBottom: 5,\n                textAlign: \"center\",\n                fontSize: 14,\n                fontWeight: \"bold\"\n              },\n              children: [\"Passenger: \", driverState.passengerName]\n            }), _jsx(Divider, {}), _jsxs(View, {\n              style: {\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-evenly\",\n                alignItems: \"center\"\n              },\n              children: [_jsx(Pressable, {\n                android_ripple: {\n                  color: \"white\"\n                },\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  marginTop: 5,\n                  backgroundColor: themeColors.googleGreen,\n                  padding: 10,\n                  borderRadius: 1\n                },\n                onPress: function onPress() {\n                  return Linking.openURL(\"tel:\" + driverState.passengerNumber);\n                },\n                children: _jsxs(Text, {\n                  style: {\n                    fontSize: 14,\n                    fontWeight: \"bold\",\n                    color: \"white\"\n                  },\n                  children: [\"Call \", driverState.passengerName]\n                })\n              }), _jsx(Pressable, {\n                android_ripple: {\n                  color: \"white\"\n                },\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  marginTop: 5,\n                  backgroundColor: themeColors.googleBlue,\n                  padding: 10,\n                  borderRadius: 1\n                },\n                onPress: markTourAsComplete,\n                children: _jsx(Text, {\n                  style: {\n                    fontSize: 14,\n                    color: \"white\",\n                    fontWeight: \"bold\"\n                  },\n                  children: \"Finish Tour\"\n                })\n              })]\n            })]\n          })\n        })]\n      })\n    })\n  });\n};\nexport default Driver;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Location","SecureStore","Card","Divider","useAppDispatch","useToast","RefreshControl","themeColors","getNearPassengersAPI","fetchTours","instance","styles","DriverCardData","DriverMapView","PassengerMapView","Durations","finishTourAPI","bookTourAPI","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","initialDriverState","data","errorMsg","fetchingLocation","mapRegion","passengerName","passengerNumber","chosenTourID","loadingNearPsngrs","tourChosen","destination","Driver","driverState","setDriverState","dispatch","toast","autoSendLocation","prevState","requestForegroundPermissionsAsync","status","location","getCurrentPositionAsync","coords","body","post","error","console","log","show","placement","type","setTimeout","getNearPassengers","response","startTour","id","result","textStyle","fontWeight","normalColor","latitudeResp","coordinates","longitudeResp","nameResp","passenger","name","phoneResp","phoneNumber","renderDriverToursItem","item","index","width","cardWrapper","distanceInKiloMeter","startTime","endTime","color","cardFindButton","_id","cardFindText","showDriverToast","style","marginTop","duration","SHORT","getShowName","PersonName","getItemAsync","MEDIUM","handleRefresh","markTourAsComplete","message","container","listFooterWrapper","listFooterText","length","flexGrow","position","left","right","top","padding","backgroundColor","googleGray","opacity","height","marginBottom","textAlign","fontSize","display","flexDirection","justifyContent","alignItems","googleGreen","borderRadius","Linking","openURL","googleBlue"],"sources":["/Users/charbelmansour/uber/src/screens/Driver/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\"\nimport {\n  Text,\n  View,\n  Pressable,\n  ActivityIndicator,\n  FlatList,\n  Linking,\n  Alert,\n} from \"react-native\"\nimport * as Location from \"expo-location\"\nimport * as SecureStore from \"expo-secure-store\"\nimport { Card, Divider } from \"react-native-paper\"\nimport { useAppDispatch } from \"../../redux/app/rtkHooks\"\nimport { useToast } from \"react-native-toast-notifications\"\nimport { BASE_URL } from \"../../config/url\"\nimport { RefreshControl } from \"react-native-gesture-handler\"\nimport { themeColors } from \"../../config/themeColors\"\nimport { getNearPassengersAPI } from \"../../services/getNearPassengersAPI\"\nimport { fetchTours } from \"../../redux/passenger/tour/tourSlice\"\nimport { instance } from \"../../services/api\"\nimport { styles } from \"./styles\"\nimport {\n  DriverCardData,\n  SharedFlatListHeader,\n  DriverMapView,\n  PassengerMapView,\n} from \"../../components/index\"\nimport { setUser } from \"../../redux/login/loginSlice\"\nimport { Durations } from \"../../helpers/durations\"\nimport { finishTourAPI } from \"../../services/finishTourAPI\"\nimport { bookTourAPI } from \"../../services/bookTourAPI\"\n\nconst initialRegion = {\n  latitude: 33.8938,\n  longitude: 35.5018,\n  latitudeDelta: 2.01,\n  longitudeDelta: 2.01,\n}\n\ntype Region = typeof initialRegion\n\ntype Item = {\n  _id: string\n  distanceInKiloMeter: number\n  endTime: string\n  startTime: string\n}\n\ntype DriverState = {\n  data: Item[]\n  errorMsg: string | null\n  fetchingLocation: boolean\n  mapRegion: Region\n  passengerName: string | null\n  passengerNumber: number | null\n  chosenTourID: string | null\n  loadingNearPsngrs: boolean\n  tourChosen: boolean\n  destination: Region | null\n}\n\nconst initialDriverState: DriverState = {\n  data: [],\n  errorMsg: null,\n  fetchingLocation: false,\n  mapRegion: initialRegion,\n  passengerName: null,\n  passengerNumber: null,\n  chosenTourID: null,\n  loadingNearPsngrs: false,\n  tourChosen: false,\n  destination: null,\n}\n\nconst Driver = () => {\n  const [driverState, setDriverState] =\n    useState<DriverState>(initialDriverState)\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTours())\n  }, [])\n\n  const toast = useToast()\n\n  // auto Send Location - both\n  const autoSendLocation = async () => {\n    setDriverState((prevState) => ({ ...prevState, fetchingLocation: true }))\n    let { status } = await Location.requestForegroundPermissionsAsync()\n    if (status !== \"granted\") {\n      setDriverState((prevState) => ({\n        ...prevState,\n        errorMsg: \"Permission to access location was denied\",\n      }))\n      return\n    }\n    let location = await Location.getCurrentPositionAsync({})\n    setDriverState((prevState) => ({\n      ...prevState,\n      mapRegion: {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.001,\n        longitudeDelta: 0.001,\n      },\n    }))\n    try {\n      const latitude = location.coords.latitude\n      const longitude = location.coords.longitude\n      const body = {\n        longitude: longitude,\n        latitude: latitude,\n      }\n      await instance.post(`/auth/updatecoordinates`, body)\n    } catch (error) {\n      setDriverState((prevState) => ({ ...prevState, fetchingLocation: false }))\n      console.log(error)\n      toast.show(\"There was an error\\nPlease try again\", {\n        placement: \"center\",\n        type: \"error\",\n      })\n      setTimeout(autoSendLocation, 2000)\n    }\n    setDriverState((prevState) => ({ ...prevState, fetchingLocation: false }))\n  }\n\n  useEffect(() => {\n    autoSendLocation()\n  }, [])\n\n  const getNearPassengers = async () => {\n    try {\n      setDriverState((prevState) => ({ ...prevState, loadingNearPsngrs: true }))\n      const response: any = await getNearPassengersAPI()\n      setDriverState((prevState) => ({\n        ...prevState,\n        data: response.data,\n        loadingNearPsngrs: false,\n      }))\n    } catch (error) {\n      console.log(error)\n      setDriverState((prevState) => ({\n        ...prevState,\n        loadingNearPsngrs: false,\n      }))\n    }\n  }\n\n  const startTour = useCallback(\n    async (id: string | any) => {\n      try {\n        const result = await bookTourAPI(id)\n        setDriverState((prevState) => ({ ...prevState, chosenTourID: id }))\n        toast.show(`Tour started\\n\\nPassenger location dropped on map.`, {\n          textStyle: { fontWeight: \"normal\" },\n          type: \"normal\",\n          normalColor: \"#3466b3\",\n        })\n        const latitudeResp = result.coordinates?.latitude\n        const longitudeResp = result.coordinates?.longitude\n        const nameResp = result.passenger?.name\n        const phoneResp = result.passenger?.phoneNumber\n\n        setDriverState((prevState) => ({\n          ...prevState,\n          passengerName: nameResp,\n          passengerNumber: phoneResp,\n          destination: {\n            latitude: latitudeResp,\n            longitude: longitudeResp,\n            latitudeDelta: 0.1,\n            longitudeDelta: 0.1,\n          },\n          tourChosen: true,\n        }))\n\n        // set tour chosen to true to use big map screen\n        // remove taken passenger by refreshing list\n        getNearPassengers()\n      } catch (error) {\n        console.log(error)\n      }\n    },\n    [\n      getNearPassengers,\n      driverState.chosenTourID,\n      driverState.destination,\n      driverState.passengerName,\n      driverState.passengerNumber,\n    ]\n  )\n\n  // driver's available tours\n  const renderDriverToursItem = ({\n    item,\n    index,\n  }: {\n    item: Item\n    index: number\n  }) => (\n    <View style={{ width: \"100%\" }}>\n      <Card mode=\"elevated\" elevation={3} style={styles.cardWrapper}>\n        <DriverCardData\n          index={index}\n          distanceInKM={item.distanceInKiloMeter}\n          startTime={item.startTime}\n          endTime={item.endTime}\n        />\n        <Pressable\n          android_ripple={{ color: \"gray\" }}\n          style={styles.cardFindButton}\n          onPress={() => startTour(item._id)}\n        >\n          <Text style={styles.cardFindText}>Start / Book tour</Text>\n        </Pressable>\n      </Card>\n    </View>\n  )\n\n  const showDriverToast = () =>\n    toast.show(\"Fetching near passengers\", {\n      placement: \"top\",\n      style: { marginTop: 20 },\n      duration: Durations.SHORT,\n      normalColor: \"#3466b3\",\n      textStyle: { fontWeight: \"normal\" },\n    })\n\n  const getShowName = async () => {\n    const PersonName = await SecureStore.getItemAsync(\"PersonName\")\n    toast.show(`Welcome, ${PersonName}`, {\n      placement: \"bottom\",\n      style: { marginTop: 20 },\n      duration: Durations.MEDIUM,\n      normalColor: \"#3466b3\",\n      textStyle: { fontWeight: \"normal\" },\n    })\n  }\n\n  useEffect(() => {\n    getShowName()\n    showDriverToast()\n    setTimeout(() => {\n      getNearPassengers()\n    }, 2000)\n  }, [])\n\n  const handleRefresh = () => {\n    setDriverState((prevState) => ({ ...prevState, loadingNearPsngrs: false }))\n    getNearPassengers()\n  }\n\n  const markTourAsComplete = useCallback(async () => {\n    try {\n      const { message } = await finishTourAPI(driverState.chosenTourID)\n      setDriverState((prevState) => ({ ...prevState, tourChosen: false }))\n      toast.show(message)\n    } catch (error) {\n      toast.show(\"there was a problem finish your tour.\")\n      console.log(error)\n    }\n  }, [driverState.chosenTourID])\n\n  return (\n    <View style={styles.container}>\n      <View>\n        {!driverState.tourChosen ? (\n          <React.Fragment>\n            <DriverMapView mapRegion={driverState.mapRegion} />\n            <FlatList\n              ListHeaderComponent={\n                <React.Fragment>\n                  {/* <SharedFlatListHeader /> */}\n                </React.Fragment>\n              }\n              ListEmptyComponent={\n                <View style={styles.listFooterWrapper}>\n                  <Text style={styles.listFooterText}>\n                    No Available Tours at this time.\n                  </Text>\n                </View>\n              }\n              refreshControl={\n                <RefreshControl\n                  enabled={!driverState.loadingNearPsngrs}\n                  refreshing={driverState.loadingNearPsngrs}\n                  onRefresh={async () => {\n                    handleRefresh()\n                  }}\n                  tintColor=\"black\"\n                />\n              }\n              ListFooterComponent={\n                <View>\n                  {driverState.data.length ? (\n                    <View style={styles.listFooterWrapper}>\n                      <Text style={styles.listFooterText}>\n                        {driverState.loadingNearPsngrs\n                          ? \"Loading near passengers\"\n                          : \"End Reached\"}\n                      </Text>\n                    </View>\n                  ) : (\n                    <React.Fragment></React.Fragment>\n                  )}\n                </View>\n              }\n              contentContainerStyle={{\n                flexGrow: 1,\n              }}\n              data={driverState.data}\n              renderItem={renderDriverToursItem}\n              keyExtractor={(item) => item._id}\n            />\n            <>\n              {driverState.fetchingLocation && (\n                <ActivityIndicator\n                  size=\"large\"\n                  color=\"#3466b3\"\n                  style={{\n                    position: \"absolute\",\n                    left: 1,\n                    right: 1,\n                    top: 1,\n                    marginTop: \"25%\",\n                  }}\n                />\n              )}\n            </>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <PassengerMapView\n              mapRegion={driverState.mapRegion}\n              destination={driverState.destination}\n              passengerName={driverState.passengerName}\n              passengerNumber={driverState.passengerNumber}\n            />\n            {driverState.passengerName && driverState.passengerNumber && (\n              <React.Fragment>\n                <View\n                  style={{\n                    padding: 10,\n                    backgroundColor: themeColors.googleGray,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    opacity: 1,\n                    height: \"12%\",\n                  }}\n                >\n                  <Text\n                    style={{\n                      color: \"white\",\n                      marginBottom: 5,\n                      textAlign: \"center\",\n                      fontSize: 14,\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    Passenger: {driverState.passengerName}\n                  </Text>\n                  <Divider />\n                  <View\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      justifyContent: \"space-evenly\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <Pressable\n                      android_ripple={{ color: \"white\" }}\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        marginTop: 5,\n                        backgroundColor: themeColors.googleGreen,\n                        padding: 10,\n                        borderRadius: 1,\n                      }}\n                      onPress={() =>\n                        Linking.openURL(`tel:${driverState.passengerNumber}`)\n                      }\n                    >\n                      <Text\n                        style={{\n                          fontSize: 14,\n                          fontWeight: \"bold\",\n                          color: \"white\",\n                        }}\n                      >\n                        Call {driverState.passengerName}\n                      </Text>\n                    </Pressable>\n                    <Pressable\n                      android_ripple={{ color: \"white\" }}\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        marginTop: 5,\n                        backgroundColor: themeColors.googleBlue,\n                        padding: 10,\n                        borderRadius: 1,\n                      }}\n                      onPress={markTourAsComplete}\n                    >\n                      <Text\n                        style={{\n                          fontSize: 14,\n                          color: \"white\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        Finish Tour\n                      </Text>\n                    </Pressable>\n                  </View>\n                </View>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        )}\n      </View>\n    </View>\n  )\n}\n\nexport default Driver\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}